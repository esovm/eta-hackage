From b8d4b242f703f9b05b84f6bddbd40e464ea52836 Mon Sep 17 00:00:00 2001
From: jneira <atreyu.bbb@gmail.com>
Date: Wed, 24 Oct 2018 08:32:58 +0200
Subject: [PATCH] Patched including JavaConverter JByteArray

---
 Data/ByteString/Builder/Internal.hs    |  12 +-
 Data/ByteString/Builder/Prim/ASCII.hs  |  24 +--
 Data/ByteString/Builder/Prim/Binary.hs | 119 +++++---------
 Data/ByteString/Internal.hs            |  57 +++++--
 Data/ByteString/Lazy/Internal.hs       |   7 +
 Data/ByteString/Short/Internal.hs      |   2 +-
 Data/ByteString/Unsafe.hs              |   8 +
 bytestring.cabal                       |  16 +-
 java/Utils.java                        | 283 +++++++++++++++++++++++++++++++++
 java/eta-0.0.9/Utils.java              | 254 +++++++++++++++++++++++++++++
 10 files changed, 668 insertions(+), 114 deletions(-)
 create mode 100644 java/Utils.java
 create mode 100644 java/eta-0.0.9/Utils.java

diff --git a/Data/ByteString/Builder/Internal.hs b/Data/ByteString/Builder/Internal.hs
index 90b35c6..da2041b 100644
--- a/Data/ByteString/Builder/Internal.hs
+++ b/Data/ByteString/Builder/Internal.hs
@@ -171,6 +171,16 @@ import           Foreign
 import           GHC.IO (unsafeDupablePerformIO)
 #endif
 
+#ifdef TRAMPOLINE
+import qualified GHC.IO as IO
+
+trampolineIO :: IO a -> IO a
+trampolineIO = IO.trampolineIO
+#else
+trampolineIO :: IO a -> IO a
+trampolineIO = id
+#endif
+
 ------------------------------------------------------------------------------
 -- Buffers
 ------------------------------------------------------------------------------
@@ -335,7 +345,7 @@ fillWithBuildStep
     -> IO b
     -- ^ Value computed while filling this 'BufferRange'.
 fillWithBuildStep step fDone fFull fChunk !br = do
-    signal <- step br
+    signal <- trampolineIO $ step br
     case signal of
         Done op x                      -> fDone op x
         BufferFull minSize op nextStep -> fFull op minSize nextStep
diff --git a/Data/ByteString/Builder/Prim/ASCII.hs b/Data/ByteString/Builder/Prim/ASCII.hs
index 62bd5be..92c53d7 100644
--- a/Data/ByteString/Builder/Prim/ASCII.hs
+++ b/Data/ByteString/Builder/Prim/ASCII.hs
@@ -104,11 +104,11 @@ char7 = (\c -> fromIntegral $ ord c .&. 0x7f) >$< word8
 -- Signed integers
 ------------------
 
-foreign import ccall unsafe "static _hs_bytestring_int_dec" c_int_dec
-    :: CInt -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.int_dec"
+  c_int_dec :: CInt -> Ptr Word8 -> IO (Ptr Word8)
 
-foreign import ccall unsafe "static _hs_bytestring_long_long_int_dec" c_long_long_int_dec
-    :: CLLong -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.long_long_int_dec"
+  c_long_long_int_dec :: CLLong -> Ptr Word8 -> IO (Ptr Word8)
 
 {-# INLINE encodeIntDecimal #-}
 encodeIntDecimal :: Integral a => Int -> BoundedPrim a
@@ -146,11 +146,11 @@ intDec = caseWordSize_32_64
 -- Unsigned integers
 --------------------
 
-foreign import ccall unsafe "static _hs_bytestring_uint_dec" c_uint_dec
-    :: CUInt -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.uint_dec"
+  c_uint_dec :: CUInt -> Ptr Word8 -> IO (Ptr Word8)
 
-foreign import ccall unsafe "static _hs_bytestring_long_long_uint_dec" c_long_long_uint_dec
-    :: CULLong -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.long_long_uint_dec"
+  c_long_long_uint_dec :: CULLong -> Ptr Word8 -> IO (Ptr Word8)
 
 {-# INLINE encodeWordDecimal #-}
 encodeWordDecimal :: Integral a => Int -> BoundedPrim a
@@ -190,11 +190,11 @@ wordDec = caseWordSize_32_64
 -- without lead
 ---------------
 
-foreign import ccall unsafe "static _hs_bytestring_uint_hex" c_uint_hex
-    :: CUInt -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.uint_hex"
+  c_uint_hex :: CUInt -> Ptr Word8 -> IO (Ptr Word8)
 
-foreign import ccall unsafe "static _hs_bytestring_long_long_uint_hex" c_long_long_uint_hex
-    :: CULLong -> Ptr Word8 -> IO (Ptr Word8)
+foreign import java unsafe "@static eta.bytestring.Utils.long_long_uint_hex"
+  c_long_long_uint_hex :: CULLong -> Ptr Word8 -> IO (Ptr Word8)
 
 {-# INLINE encodeWordHex #-}
 encodeWordHex :: forall a. (Storable a, Integral a) => BoundedPrim a
diff --git a/Data/ByteString/Builder/Prim/Binary.hs b/Data/ByteString/Builder/Prim/Binary.hs
index af0c0bb..88bc0e5 100644
--- a/Data/ByteString/Builder/Prim/Binary.hs
+++ b/Data/ByteString/Builder/Prim/Binary.hs
@@ -59,6 +59,7 @@ import Data.ByteString.Builder.Prim.Internal.UncheckedShifts
 import Data.ByteString.Builder.Prim.Internal.Floating
 
 import Foreign
+import System.Info (bigEndian)
 
 #include "MachDeps.h"
 
@@ -83,50 +84,42 @@ word8 = storableToF
 -- | Encoding 'Word16's in big endian format.
 {-# INLINE word16BE #-}
 word16BE :: FixedPrim Word16
-#ifdef WORDS_BIGENDIAN
-word16BE = word16Host
-#else
-word16BE = fixedPrim 2 $ \w p -> do
-    poke p               (fromIntegral (shiftr_w16 w 8) :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (w)              :: Word8)
-#endif
+word16BE
+  | bigEndian = word16Host
+  | otherwise = fixedPrim 2 $ \w p -> do
+      poke p               (fromIntegral (shiftr_w16 w 8) :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (w)              :: Word8)
 
 -- | Encoding 'Word16's in little endian format.
 {-# INLINE word16LE #-}
 word16LE :: FixedPrim Word16
-#ifdef WORDS_BIGENDIAN
-word16LE = fixedPrim 2 $ \w p -> do
-    poke p               (fromIntegral (w)              :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w16 w 8) :: Word8)
-#else
-word16LE = word16Host
-#endif
+word16LE
+  | bigEndian = fixedPrim 2 $ \w p -> do
+      poke p               (fromIntegral (w)              :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (shiftr_w16 w 8) :: Word8)
+  | otherwise = word16Host
 
 -- | Encoding 'Word32's in big endian format.
 {-# INLINE word32BE #-}
 word32BE :: FixedPrim Word32
-#ifdef WORDS_BIGENDIAN
-word32BE = word32Host
-#else
-word32BE = fixedPrim 4 $ \w p -> do
-    poke p               (fromIntegral (shiftr_w32 w 24) :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 w 16) :: Word8)
-    poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 w  8) :: Word8)
-    poke (p `plusPtr` 3) (fromIntegral (w)               :: Word8)
-#endif
+word32BE
+  | bigEndian = word32Host
+  | otherwise = fixedPrim 4 $ \w p -> do
+      poke p               (fromIntegral (shiftr_w32 w 24) :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 w 16) :: Word8)
+      poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 w  8) :: Word8)
+      poke (p `plusPtr` 3) (fromIntegral (w)               :: Word8)
 
 -- | Encoding 'Word32's in little endian format.
 {-# INLINE word32LE #-}
 word32LE :: FixedPrim Word32
-#ifdef WORDS_BIGENDIAN
-word32LE = fixedPrim 4 $ \w p -> do
-    poke p               (fromIntegral (w)               :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 w  8) :: Word8)
-    poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 w 16) :: Word8)
-    poke (p `plusPtr` 3) (fromIntegral (shiftr_w32 w 24) :: Word8)
-#else
-word32LE = word32Host
-#endif
+word32LE
+  | bigEndian = fixedPrim 4 $ \w p -> do
+      poke p               (fromIntegral (w)               :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 w  8) :: Word8)
+      poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 w 16) :: Word8)
+      poke (p `plusPtr` 3) (fromIntegral (shiftr_w32 w 24) :: Word8)
+  | otherwise = word32Host
 
 -- on a little endian machine:
 -- word32LE w32 = fixedPrim 4 (\w p -> poke (castPtr p) w32)
@@ -134,15 +127,13 @@ word32LE = word32Host
 -- | Encoding 'Word64's in big endian format.
 {-# INLINE word64BE #-}
 word64BE :: FixedPrim Word64
-#ifdef WORDS_BIGENDIAN
-word64BE = word64Host
-#else
-#if WORD_SIZE_IN_BITS < 64
+word64BE
+  | bigEndian = word64Host
+  | otherwise =
 --
 -- To avoid expensive 64 bit shifts on 32 bit machines, we cast to
 -- Word32, and write that
 --
-word64BE =
     fixedPrim 8 $ \w p -> do
         let a = fromIntegral (shiftr_w64 w 32) :: Word32
             b = fromIntegral w                 :: Word32
@@ -154,51 +145,23 @@ word64BE =
         poke (p `plusPtr` 5) (fromIntegral (shiftr_w32 b 16) :: Word8)
         poke (p `plusPtr` 6) (fromIntegral (shiftr_w32 b  8) :: Word8)
         poke (p `plusPtr` 7) (fromIntegral (b)               :: Word8)
-#else
-word64BE = fixedPrim 8 $ \w p -> do
-    poke p               (fromIntegral (shiftr_w64 w 56) :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w64 w 48) :: Word8)
-    poke (p `plusPtr` 2) (fromIntegral (shiftr_w64 w 40) :: Word8)
-    poke (p `plusPtr` 3) (fromIntegral (shiftr_w64 w 32) :: Word8)
-    poke (p `plusPtr` 4) (fromIntegral (shiftr_w64 w 24) :: Word8)
-    poke (p `plusPtr` 5) (fromIntegral (shiftr_w64 w 16) :: Word8)
-    poke (p `plusPtr` 6) (fromIntegral (shiftr_w64 w  8) :: Word8)
-    poke (p `plusPtr` 7) (fromIntegral (w)               :: Word8)
-#endif
-#endif
 
 -- | Encoding 'Word64's in little endian format.
 {-# INLINE word64LE #-}
 word64LE :: FixedPrim Word64
-#ifdef WORDS_BIGENDIAN
-#if WORD_SIZE_IN_BITS < 64
-word64LE =
-    fixedPrim 8 $ \w p -> do
-        let b = fromIntegral (shiftr_w64 w 32) :: Word32
-            a = fromIntegral w                 :: Word32
-        poke (p)             (fromIntegral (a)               :: Word8)
-        poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 a  8) :: Word8)
-        poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 a 16) :: Word8)
-        poke (p `plusPtr` 3) (fromIntegral (shiftr_w32 a 24) :: Word8)
-        poke (p `plusPtr` 4) (fromIntegral (b)               :: Word8)
-        poke (p `plusPtr` 5) (fromIntegral (shiftr_w32 b  8) :: Word8)
-        poke (p `plusPtr` 6) (fromIntegral (shiftr_w32 b 16) :: Word8)
-        poke (p `plusPtr` 7) (fromIntegral (shiftr_w32 b 24) :: Word8)
-#else
-word64LE = fixedPrim 8 $ \w p -> do
-    poke p               (fromIntegral (w)               :: Word8)
-    poke (p `plusPtr` 1) (fromIntegral (shiftr_w64 w  8) :: Word8)
-    poke (p `plusPtr` 2) (fromIntegral (shiftr_w64 w 16) :: Word8)
-    poke (p `plusPtr` 3) (fromIntegral (shiftr_w64 w 24) :: Word8)
-    poke (p `plusPtr` 4) (fromIntegral (shiftr_w64 w 32) :: Word8)
-    poke (p `plusPtr` 5) (fromIntegral (shiftr_w64 w 40) :: Word8)
-    poke (p `plusPtr` 6) (fromIntegral (shiftr_w64 w 48) :: Word8)
-    poke (p `plusPtr` 7) (fromIntegral (shiftr_w64 w 56) :: Word8)
-#endif
-#else
-word64LE = word64Host
-#endif
-
+word64LE
+  | bigEndian = fixedPrim 8 $ \w p -> do
+      let b = fromIntegral (shiftr_w64 w 32) :: Word32
+          a = fromIntegral w                 :: Word32
+      poke (p)             (fromIntegral (a)               :: Word8)
+      poke (p `plusPtr` 1) (fromIntegral (shiftr_w32 a  8) :: Word8)
+      poke (p `plusPtr` 2) (fromIntegral (shiftr_w32 a 16) :: Word8)
+      poke (p `plusPtr` 3) (fromIntegral (shiftr_w32 a 24) :: Word8)
+      poke (p `plusPtr` 4) (fromIntegral (b)               :: Word8)
+      poke (p `plusPtr` 5) (fromIntegral (shiftr_w32 b  8) :: Word8)
+      poke (p `plusPtr` 6) (fromIntegral (shiftr_w32 b 16) :: Word8)
+      poke (p `plusPtr` 7) (fromIntegral (shiftr_w32 b 24) :: Word8)
+  | otherwise = word64Host
 
 -- | Encode a single native machine 'Word'. The 'Word's is encoded in host order,
 -- host endian form, for the machine you are on. On a 64 bit machine the 'Word'
diff --git a/Data/ByteString/Internal.hs b/Data/ByteString/Internal.hs
index 031403e..37f690a 100644
--- a/Data/ByteString/Internal.hs
+++ b/Data/ByteString/Internal.hs
@@ -1,6 +1,7 @@
 {-# LANGUAGE CPP, ForeignFunctionInterface, BangPatterns #-}
 {-# LANGUAGE UnliftedFFITypes, MagicHash,
             UnboxedTuples, DeriveDataTypeable #-}
+{-# LANGUAGE MultiParamTypeClasses #-}
 #if __GLASGOW_HASKELL__ >= 703
 {-# LANGUAGE Unsafe #-}
 #endif
@@ -54,7 +55,9 @@ module Data.ByteString.Internal (
 
         -- * Standard C Functions
         c_strlen,               -- :: CString -> IO CInt
+#if ETA_VERSION >= 9
         c_free_finalizer,       -- :: FunPtr (Ptr Word8 -> IO ())
+#endif
 
         memchr,                 -- :: Ptr Word8 -> Word8 -> CSize -> IO Ptr Word8
         memcmp,                 -- :: Ptr Word8 -> Ptr Word8 -> Int -> IO CInt
@@ -125,11 +128,13 @@ import GHC.IO                   (IO(IO),unsafeDupablePerformIO)
 #else
 import GHC.IOBase               (IO(IO),RawBuffer,unsafeDupablePerformIO)
 #endif
-
+import GHC.IO.Unsafe            (unsafePerformIO)
 import GHC.ForeignPtr           (ForeignPtr(ForeignPtr)
                                 ,newForeignPtr_, mallocPlainForeignPtrBytes)
 import GHC.Ptr                  (Ptr(..), castPtr)
 
+import Java
+
 -- CFILES stuff is Hugs only
 {-# CFILES cbits/fpstring.c #-}
 
@@ -185,6 +190,16 @@ instance Data ByteString where
   gunfold _ _    = error "Data.ByteString.ByteString.gunfold"
   dataTypeOf _   = mkNoRepType "Data.ByteString.ByteString"
 
+instance JavaConverter ByteString JByteArray where
+  toJava bs = unsafePerformIO $
+              withForeignPtr fptr
+              $ \ ptr -> return $ toByteArray ptr offset length
+    where (fptr,offset,length) = toForeignPtr bs
+  fromJava = packBytes . fromJava 
+
+foreign import java unsafe "@static eta.runtime.io.MemoryManager.getBytes"
+   toByteArray :: Ptr Word8 -> Int -> Int -> JByteArray
+
 ------------------------------------------------------------------------
 -- Packing and unpacking from lists
 
@@ -195,12 +210,12 @@ packChars :: [Char] -> ByteString
 packChars cs = unsafePackLenChars (List.length cs) cs
 
 {-# INLINE [0] packChars #-}
-
+{- TODO: Deal with unsafePackAddress
 {-# RULES
 "ByteString packChars/packAddress" forall s .
    packChars (unpackCString# s) = accursedUnutterablePerformIO (unsafePackAddress s)
  #-}
-
+-}
 unsafePackLenBytes :: Int -> [Word8] -> ByteString
 unsafePackLenBytes len xs0 =
     unsafeCreate len $ \p -> go p xs0
@@ -601,32 +616,39 @@ inlinePerformIO = accursedUnutterablePerformIO
 -- Standard C functions
 --
 
-foreign import ccall unsafe "string.h strlen" c_strlen
+foreign import java unsafe "@static eta.bytestring.Utils.strlen" c_strlen
     :: CString -> IO CSize
 
-foreign import ccall unsafe "static stdlib.h &free" c_free_finalizer
+#if ETA_VERSION >= 9
+foreign import java unsafe "@static eta.runtime.io.MemoryManager.free" c_free_finalizer
     :: FunPtr (Ptr Word8 -> IO ())
+#endif
 
-foreign import ccall unsafe "string.h memchr" c_memchr
+foreign import java unsafe "@static eta.bytestring.Utils.memchr" c_memchr
     :: Ptr Word8 -> CInt -> CSize -> IO (Ptr Word8)
 
 memchr :: Ptr Word8 -> Word8 -> CSize -> IO (Ptr Word8)
 memchr p w s = c_memchr p (fromIntegral w) s
 
-foreign import ccall unsafe "string.h memcmp" c_memcmp
+foreign import java unsafe "@static eta.bytestring.Utils.memcmp" c_memcmp
     :: Ptr Word8 -> Ptr Word8 -> CSize -> IO CInt
 
 memcmp :: Ptr Word8 -> Ptr Word8 -> Int -> IO CInt
 memcmp p q s = c_memcmp p q (fromIntegral s)
 
-foreign import ccall unsafe "string.h memcpy" c_memcpy
+#if ETA_VERSION >= 9
+foreign import java unsafe "@static eta.base.Utils.c_memcpy" c_memcpy
+    :: Ptr Word8 -> Ptr Word8 -> CSize -> IO (Ptr Word8)
+#else
+foreign import java unsafe "@static eta.bytestring.Utils.memcpy" c_memcpy
     :: Ptr Word8 -> Ptr Word8 -> CSize -> IO (Ptr Word8)
+#endif
 
 memcpy :: Ptr Word8 -> Ptr Word8 -> Int -> IO ()
 memcpy p q s = c_memcpy p q (fromIntegral s) >> return ()
 
 {-
-foreign import ccall unsafe "string.h memmove" c_memmove
+foreign import java unsafe "@static eta.bytestring.Utils.memmove" c_memmove
     :: Ptr Word8 -> Ptr Word8 -> CSize -> IO (Ptr Word8)
 
 memmove :: Ptr Word8 -> Ptr Word8 -> CSize -> IO ()
@@ -634,8 +656,13 @@ memmove p q s = do c_memmove p q s
                    return ()
 -}
 
-foreign import ccall unsafe "string.h memset" c_memset
+#if ETA_VERSION >= 9
+foreign import java unsafe "@static eta.base.Utils.c_memset" c_memset
     :: Ptr Word8 -> CInt -> CSize -> IO (Ptr Word8)
+#else
+foreign import java unsafe "@static eta.bytestring.Utils.memset" c_memset
+    :: Ptr Word8 -> CInt -> CSize -> IO (Ptr Word8)
+#endif
 
 memset :: Ptr Word8 -> Word8 -> CSize -> IO (Ptr Word8)
 memset p w s = c_memset p (fromIntegral w) s
@@ -645,17 +672,17 @@ memset p w s = c_memset p (fromIntegral w) s
 -- Uses our C code
 --
 
-foreign import ccall unsafe "static fpstring.h fps_reverse" c_reverse
+foreign import java unsafe "@static eta.bytestring.Utils.fps_reverse" c_reverse
     :: Ptr Word8 -> Ptr Word8 -> CULong -> IO ()
 
-foreign import ccall unsafe "static fpstring.h fps_intersperse" c_intersperse
+foreign import java unsafe "@static eta.bytestring.Utils.fps_intersperse" c_intersperse
     :: Ptr Word8 -> Ptr Word8 -> CULong -> Word8 -> IO ()
 
-foreign import ccall unsafe "static fpstring.h fps_maximum" c_maximum
+foreign import java unsafe "@static eta.bytestring.Utils.fps_maximum" c_maximum
     :: Ptr Word8 -> CULong -> IO Word8
 
-foreign import ccall unsafe "static fpstring.h fps_minimum" c_minimum
+foreign import java unsafe "@static eta.bytestring.Utils.fps_minimum" c_minimum
     :: Ptr Word8 -> CULong -> IO Word8
 
-foreign import ccall unsafe "static fpstring.h fps_count" c_count
+foreign import java unsafe "@static eta.bytestring.Utils.fps_count" c_count
     :: Ptr Word8 -> CULong -> Word8 -> IO CULong
diff --git a/Data/ByteString/Lazy/Internal.hs b/Data/ByteString/Lazy/Internal.hs
index fcf6cc6..5b319e9 100644
--- a/Data/ByteString/Lazy/Internal.hs
+++ b/Data/ByteString/Lazy/Internal.hs
@@ -1,5 +1,6 @@
 {-# LANGUAGE CPP #-}
 {-# LANGUAGE DeriveDataTypeable #-}
+{-# LANGUAGE MultiParamTypeClasses #-}
 #if __GLASGOW_HASKELL__ >= 703
 {-# LANGUAGE Unsafe #-}
 #endif
@@ -64,6 +65,8 @@ import Data.String      (IsString(..))
 import Data.Typeable            (Typeable)
 import Data.Data                (Data(..), mkNoRepType)
 
+import Java
+
 -- | A space-efficient representation of a 'Word8' vector, supporting many
 -- efficient operations.
 --
@@ -114,6 +117,10 @@ instance Data ByteString where
   gunfold _ _    = error "Data.ByteString.Lazy.ByteString.gunfold"
   dataTypeOf _   = mkNoRepType "Data.ByteString.Lazy.ByteString"
 
+instance JavaConverter ByteString JByteArray where
+  toJava = toJava . unpackBytes
+  fromJava = packBytes . fromJava
+
 ------------------------------------------------------------------------
 -- Packing and unpacking from lists
 
diff --git a/Data/ByteString/Short/Internal.hs b/Data/ByteString/Short/Internal.hs
index a52c52c..fd186b7 100644
--- a/Data/ByteString/Short/Internal.hs
+++ b/Data/ByteString/Short/Internal.hs
@@ -497,7 +497,7 @@ memcmp_ByteArray :: BA -> BA -> Int -> IO CInt
 memcmp_ByteArray (BA# ba1#) (BA# ba2#) len =
   c_memcmp_ByteArray ba1# ba2# (fromIntegral len)
 
-foreign import ccall unsafe "string.h memcmp"
+foreign import java unsafe "@static eta.bytestring.Utils.memcmp"
   c_memcmp_ByteArray :: ByteArray# -> ByteArray# -> CSize -> IO CInt
 
 
diff --git a/Data/ByteString/Unsafe.hs b/Data/ByteString/Unsafe.hs
index 782a42d..60f405a 100644
--- a/Data/ByteString/Unsafe.hs
+++ b/Data/ByteString/Unsafe.hs
@@ -217,7 +217,11 @@ unsafePackCStringLen (ptr,len) = do
 --
 unsafePackMallocCString :: CString -> IO ByteString
 unsafePackMallocCString cstr = do
+#if ETA_VERSION >= 9
     fp <- newForeignPtr c_free_finalizer (castPtr cstr)
+#else
+    fp <- newForeignPtr_ {- c_free_finalizer -} (castPtr cstr)
+#endif
     len <- c_strlen cstr
     return $! PS fp 0 (fromIntegral len)
 
@@ -234,7 +238,11 @@ unsafePackMallocCString cstr = do
 --
 unsafePackMallocCStringLen :: CStringLen -> IO ByteString
 unsafePackMallocCStringLen (cstr, len) = do
+#if ETA_VERSION >= 9
     fp <- newForeignPtr c_free_finalizer (castPtr cstr)
+#else
+    fp <- newForeignPtr_ {- c_free_finalizer -} (castPtr cstr)
+#endif
     return $! PS fp 0 len
 
 -- ---------------------------------------------------------------------
diff --git a/bytestring.cabal b/bytestring.cabal
index 53d4edf..7ed9356 100644
--- a/bytestring.cabal
+++ b/bytestring.cabal
@@ -65,7 +65,7 @@ source-repository head
 
 flag integer-simple
   description: Use the simple integer library instead of GMP
-  default: False
+  default: True
 
 library
   build-depends:     base >= 4.2 && < 5, ghc-prim, deepseq
@@ -126,17 +126,19 @@ library
                     -fdicts-cheap
                     -fspec-constr-count=6
 
-  c-sources:         cbits/fpstring.c
-                     cbits/itoa.c
-  include-dirs:      include
-  includes:          fpstring.h
-  install-includes:  fpstring.h
+  if impl(eta >= 0.0.9)
+    java-sources: java/eta-0.0.9/Utils.java
+  else
+    java-sources: java/Utils.java
+
+  if impl(eta >= 0.8.0.3)
+    cpp-options: -DTRAMPOLINE
 
    -- flags for the decimal integer serialization code
   if impl(ghc >= 6.11)
     if !flag(integer-simple)
       cpp-options: -DINTEGER_GMP
-      build-depends: integer-gmp >= 0.2
+      build-depends: integer >= 0.2
 
   if impl(ghc >= 6.9) && impl(ghc < 6.11)
     cpp-options: -DINTEGER_GMP
diff --git a/java/Utils.java b/java/Utils.java
new file mode 100644
index 0000000..69a327a
--- /dev/null
+++ b/java/Utils.java
@@ -0,0 +1,283 @@
+package eta.bytestring;
+
+import java.io.UnsupportedEncodingException;
+import java.nio.ByteBuffer;import java.nio.Buffer;
+
+import eta.runtime.io.StgByteArray;
+import eta.runtime.stg.StgClosure;
+import eta.runtime.io.MemoryManager;
+
+/* NOTE: Hard limit on ByteBuffer API: 2^32 - 1 because of reliance on
+         signed integer type everywhere.
+*/
+
+public class Utils {
+    public static final long LONG_MIN = Long.MIN_VALUE;
+    public static final long ONE_MIN = 1 + LONG_MIN;
+    public static final long ZERO_MIN = 0 + LONG_MIN;
+    public static final long UNSIGNED_TEN = ((long) 10) & 0xFFFFFFFF;
+
+    public static int strlen(ByteBuffer b) {
+        b = b.duplicate();
+        int n = 0;
+        while (b.get() != 0) {
+            n++;
+        }
+        return n;
+    }
+
+    /* TODO: Verify the c argument */
+    public static ByteBuffer memchr(ByteBuffer b, int c, int n) {
+        c = (int)((byte) c);
+        b = b.duplicate();
+
+        while (n-- != 0) {
+            if (b.get() == c) {
+                return (ByteBuffer) ((Buffer)b).position(b.position() - 1);
+            }
+        }
+        return MemoryManager.nullAddress;
+    }
+
+    public static int memcmp(StgByteArray b1, StgByteArray b2, int n) {
+        return memcmp(b1.buf, b2.buf, n);
+    }
+
+    public static int memcmp(ByteBuffer b1, ByteBuffer b2, int n) {
+        /* TODO: Is the & 0xFF required? */
+        while (n-- != 0) {
+            int a = b1.get() & 0xFF;
+            int b = b2.get() & 0xFF;
+            if (a != b) {
+                return a - b;
+            }
+        }
+        return 0;
+    }
+
+    public static ByteBuffer memcpy(ByteBuffer dest, ByteBuffer src, int size) {
+        src = src.duplicate();
+        ByteBuffer dest2 = dest.duplicate();
+        ((Buffer)src).limit(src.position() + size);
+        dest2.put(src);
+        return dest;
+    }
+
+    /* TODO: Verify c_ argument */
+    public static ByteBuffer memset(ByteBuffer b, int c_, int size) {
+        byte c = (byte) c_;
+        ByteBuffer b2 = b.duplicate();
+        while (size-- != 0) {
+            b2.put(c);
+        }
+        return b;
+    }
+
+    public static long fps_count(ByteBuffer bb, long len, int w) {
+        bb = bb.duplicate();
+        long c = 0;
+        len += LONG_MIN;
+        while (len-- != ZERO_MIN) {
+            // The 0xFF is to undo the effect of sign extension
+            if ((((int)bb.get()) & 0xFF) == w) {
+                c++;
+            }
+        }
+        return c;
+    }
+
+    public static int fps_minimum(ByteBuffer bb, long len) {
+        bb = bb.duplicate();
+        int c = 257;
+        len += LONG_MIN;
+        while (len-- != ZERO_MIN) {
+            // The 0xFF is to undo the effect of sign extension
+            int q = ((int)bb.get()) & 0xFF;
+            if (q < c) {
+                c = q;
+            }
+        }
+        return c;
+    }
+
+    public static int fps_maximum(ByteBuffer bb, long len) {
+        bb = bb.duplicate();
+        int c = -1;
+        len += LONG_MIN;
+        while (len-- != ZERO_MIN) {
+            // The 0xFF is to undo the effect of sign extension
+            int q = ((int)bb.get()) & 0xFF;
+            if (q > c) {
+                c = q;
+            }
+        }
+        return c;
+    }
+
+    public static void fps_intersperse(ByteBuffer q, ByteBuffer p, long n, int c_) {
+        p = p.duplicate();
+        q = q.duplicate();
+        byte c = (byte) c_;
+        n += LONG_MIN;
+        while (n > ONE_MIN) {
+            q.put(p.get());
+            q.put(c);
+            n--;
+        }
+        if (n == ONE_MIN) {
+            q.put(p.get());
+        }
+    }
+
+    public static void fps_reverse(ByteBuffer q, ByteBuffer p, long n_) {
+        p = p.duplicate();
+        q = q.duplicate();
+        int n = (int) n_;
+        while (n-- != 0) {
+            q.put(p.get(n));
+        }
+    }
+
+    public static byte[] digits;
+    static {
+        try {
+            digits = "0123456789abcdef".getBytes("UTF-8");
+        } catch(UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static ByteBuffer long_long_uint_hex(long x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        do {
+            ptr.put(digits[(int)x & 0xf]);
+            x >>>= 4;
+        } while (x != 0);
+        int n = ptr.position() - 1;
+        int m = 0;
+        int nfree = n;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ((Buffer)ptr).position(nfree);
+    }
+
+    public static ByteBuffer uint_hex(int x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        do {
+            ptr.put(digits[x & 0xf]);
+            x >>>= 4;
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        int m = 0;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ((Buffer)ptr).position(nfree);
+    }
+
+    public static ByteBuffer long_long_uint_dec(long x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        do {
+            long x_tmp = x;
+            x = eta.integer.Utils.divideUnsigned(x, 10);
+            ptr.put(digits[(int)(x_tmp - x * 10)]);
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        int m = 0;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ((Buffer)ptr).position(nfree);
+    }
+
+    public static ByteBuffer uint_dec(int x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        do {
+            int x_tmp = x;
+            x = (int) ((((long) x) & 0xFFFFFFFFL) / 10L);
+            ptr.put(digits[x_tmp - x * 10]);
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        int m = 0;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ((Buffer)ptr).position(nfree);
+    }
+
+    public static ByteBuffer long_long_int_dec(long x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        long x_tmp;
+        int m = 0;
+        if (x < 0) {
+            ptr.put((byte)'-');
+            x_tmp = x;
+            m++;
+            x /= 10;
+            ptr.put(digits[(int)(x * 10 - x_tmp)]);
+            if (x == 0) {
+                return ptr;
+            } else {
+                x = -x;
+            }
+        }
+
+        do {
+            x_tmp = x;
+            x /= 10;
+            ptr.put(digits[(int)(x_tmp - x * 10)]);
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ((Buffer)ptr).position(nfree);
+    }
+
+    public static ByteBuffer int_dec(int x, ByteBuffer buf) {
+        ByteBuffer ptr = buf.duplicate();
+        int x_tmp;
+        int m = 0;
+        if (x < 0) {
+            ptr.put((byte)'-');
+            x_tmp = x;
+            m++;
+            x /= 10;
+            ptr.put(digits[x * 10 - x_tmp]);
+            if (x == 0) {
+                return ptr;
+            } else {
+                x = -x;
+            }
+        }
+
+        do {
+            x_tmp = x;
+            x /= 10;
+            ptr.put(digits[x_tmp - x * 10]);
+        } while (x != 0);
+        int nfree = ptr.position();
+        int n = nfree - 1;
+        while (m < n) {
+            byte c = ptr.get(n);
+            ptr.put(n--, ptr.get(m));
+            ptr.put(m++, c);
+        }
+        return (ByteBuffer) ((Buffer)ptr).position(nfree);
+    }
+}
diff --git a/java/eta-0.0.9/Utils.java b/java/eta-0.0.9/Utils.java
new file mode 100644
index 0000000..e5fcb48
--- /dev/null
+++ b/java/eta-0.0.9/Utils.java
@@ -0,0 +1,254 @@
+package eta.bytestring;
+
+import java.io.UnsupportedEncodingException;
+import java.nio.ByteBuffer;
+
+import eta.runtime.io.ByteArray;
+import eta.runtime.io.MemoryManager;
+
+/* NOTE: Hard limit on ByteBuffer API: 2^32 - 1 because of reliance on
+         signed integer type everywhere. */
+
+public class Utils {
+    public static final long LONG_MIN = Long.MIN_VALUE;
+    public static final long ONE_MIN = 1 + LONG_MIN;
+    public static final long ZERO_MIN = 0 + LONG_MIN;
+    public static final long UNSIGNED_TEN = ((long) 10) & 0xFFFFFFFF;
+
+    public static int strlen(long address) {
+        ByteBuffer b = MemoryManager.getBoundedBuffer(address);
+        int n = 0;
+        while (b.get() != 0) {
+            n++;
+        }
+        return n;
+    }
+
+    public static long memchr(long address, int c, int n) {
+        ByteBuffer b = MemoryManager.getBoundedBuffer(address);
+        c = (int)((byte) c);
+
+        while (n-- != 0) {
+            if (b.get() == c) {
+                return address;
+            }
+            address++;
+        }
+        return 0L;
+    }
+
+    public static int memcmp(ByteArray b1, ByteArray b2, int n) {
+        return memcmp(b1.bufferAddress, b2.bufferAddress, n);
+    }
+
+    public static int memcmp(long address1, long address2, int n) {
+        ByteBuffer b1 = MemoryManager.getBoundedBuffer(address1);
+        ByteBuffer b2 = MemoryManager.getBoundedBuffer(address2);
+        /* TODO: Is the & 0xFF required? */
+        while (n-- != 0) {
+            int a = b1.get() & 0xFF;
+            int b = b2.get() & 0xFF;
+            if (a != b) {
+                return a - b;
+            }
+        }
+        return 0;
+    }
+
+    public static long fps_count(long address, long len, int w) {
+        ByteBuffer bb = MemoryManager.getBoundedBuffer(address);
+        long c = 0;
+        len += LONG_MIN;
+        while (len-- != ZERO_MIN) {
+            // The 0xFF is to undo the effect of sign extension
+            if ((((int)bb.get()) & 0xFF) == w) {
+                c++;
+            }
+        }
+        return c;
+    }
+
+    public static int fps_minimum(long address, long len) {
+        ByteBuffer bb = MemoryManager.getBoundedBuffer(address);
+        int c = 257;
+        len += LONG_MIN;
+        while (len-- != ZERO_MIN) {
+            // The 0xFF is to undo the effect of sign extension
+            int q = ((int)bb.get()) & 0xFF;
+            if (q < c) {
+                c = q;
+            }
+        }
+        return c;
+    }
+
+    public static int fps_maximum(long address, long len) {
+        ByteBuffer bb = MemoryManager.getBoundedBuffer(address);
+        int c = -1;
+        len += LONG_MIN;
+        while (len-- != ZERO_MIN) {
+            // The 0xFF is to undo the effect of sign extension
+            int q = ((int)bb.get()) & 0xFF;
+            if (q > c) {
+                c = q;
+            }
+        }
+        return c;
+    }
+
+    public static void fps_intersperse(long address1, long address2, long n, int c_) {
+        ByteBuffer p = MemoryManager.getBoundedBuffer(address2);
+        ByteBuffer q = MemoryManager.getBoundedBuffer(address1);
+        byte c = (byte) c_;
+        n += LONG_MIN;
+        while (n > ONE_MIN) {
+            q.put(p.get());
+            q.put(c);
+            n--;
+        }
+        if (n == ONE_MIN) {
+            q.put(p.get());
+        }
+    }
+
+    public static void fps_reverse(long address1, long address2, long n_) {
+        ByteBuffer p = MemoryManager.getBoundedBuffer(address2);
+        ByteBuffer q = MemoryManager.getBoundedBuffer(address1);
+        int n = (int) n_;
+        while (n-- != 0) {
+            q.put(p.get(n));
+        }
+    }
+
+    public static byte[] digits;
+    static {
+        try {
+            digits = "0123456789abcdef".getBytes("UTF-8");
+        } catch(UnsupportedEncodingException e) {
+            e.printStackTrace();
+        }
+    }
+
+    public static long long_long_uint_hex(long x, long address) {
+        ByteBuffer ptr = MemoryManager.getBoundedBuffer(address);
+        int bufPos = ptr.position();
+        do {
+            ptr.put(digits[(int)x & 0xf]);
+            x >>>= 4;
+            address++;
+        } while (x != 0);
+        int ptrPos = ptr.position() - 1;
+        while (bufPos < ptrPos) {
+            byte c = ptr.get(ptrPos);
+            ptr.put(ptrPos--, ptr.get(bufPos));
+            ptr.put(bufPos++, c);
+        }
+        return address;
+    }
+
+    public static long uint_hex(int x, long address) {
+        return long_long_uint_hex(x, address);
+    }
+
+    public static long long_long_uint_dec(long x, long address) {
+        ByteBuffer ptr = MemoryManager.getBoundedBuffer(address);
+        int bufPos = ptr.position();
+        do {
+            long x_tmp = x;
+            x = eta.integer.Utils.divideUnsigned(x, 10);
+            ptr.put(digits[(int)(x_tmp - x * 10)]);
+            address++;
+        } while (x != 0);
+        int ptrPos = ptr.position() - 1;
+        while (bufPos < ptrPos) {
+            byte c = ptr.get(ptrPos);
+            ptr.put(ptrPos--, ptr.get(bufPos));
+            ptr.put(bufPos++, c);
+        }
+        return address;
+    }
+
+    public static long uint_dec(int x, long address) {
+        ByteBuffer ptr = MemoryManager.getBoundedBuffer(address);
+        int bufPos = ptr.position();
+        do {
+            int x_tmp = x;
+            x = (int) ((((long) x) & 0xFFFFFFFFL) / 10L);
+            ptr.put(digits[x_tmp - x * 10]);
+            address++;
+        } while (x != 0);
+        int ptrPos = ptr.position() - 1;
+        while (bufPos < ptrPos) {
+            byte c = ptr.get(ptrPos);
+            ptr.put(ptrPos--, ptr.get(bufPos));
+            ptr.put(bufPos++, c);
+        }
+        return address;
+    }
+
+    public static long long_long_int_dec(long x, long address) {
+        ByteBuffer ptr = MemoryManager.getBoundedBuffer(address);
+        long x_tmp;
+        int bufPos = ptr.position();
+        if (x < 0) {
+            ptr.put((byte)'-');
+            x_tmp = x;
+            bufPos++;
+            x /= 10;
+            ptr.put(digits[(int)(x * 10 - x_tmp)]);
+            address += 2;
+            if (x == 0) {
+                return address;
+            } else {
+                x = -x;
+            }
+        }
+
+        do {
+            x_tmp = x;
+            x /= 10;
+            ptr.put(digits[(int)(x_tmp - x * 10)]);
+            address++;
+        } while (x != 0);
+        int ptrPos = ptr.position() - 1;
+        while (bufPos < ptrPos) {
+            byte c = ptr.get(ptrPos);
+            ptr.put(ptrPos--, ptr.get(bufPos));
+            ptr.put(bufPos++, c);
+        }
+        return address;
+    }
+
+    public static long int_dec(int x, long address) {
+        ByteBuffer ptr = MemoryManager.getBoundedBuffer(address);
+        int x_tmp;
+        int bufPos = ptr.position();
+        if (x < 0) {
+            ptr.put((byte)'-');
+            x_tmp = x;
+            bufPos++;
+            x /= 10;
+            ptr.put(digits[x * 10 - x_tmp]);
+            address += 2;
+            if (x == 0) {
+                return address;
+            } else {
+                x = -x;
+            }
+        }
+
+        do {
+            x_tmp = x;
+            x /= 10;
+            ptr.put(digits[x_tmp - x * 10]);
+            address++;
+        } while (x != 0);
+        int ptrPos = ptr.position() - 1;
+        while (bufPos < ptrPos) {
+            byte c = ptr.get(ptrPos);
+            ptr.put(ptrPos--, ptr.get(bufPos));
+            ptr.put(bufPos++, c);
+        }
+        return address;
+    }
+}
-- 
2.16.2.windows.1

