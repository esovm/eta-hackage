From bf2a77ffe1f304c76fabe6d4bf48d45edeb39396 Mon Sep 17 00:00:00 2001
From: Rahul Muttineni <rahulmutt@gmail.com>
Date: Fri, 1 Feb 2019 20:57:24 +0530
Subject: [PATCH] Patched

---
 pandoc.cabal                          |  35 +--
 src/Text/Pandoc/Filter/Lua.hs         |   7 +-
 src/Text/Pandoc/Readers/CommonMark.hs |   6 +-
 src/Text/Pandoc/Readers/LaTeX.hs      | 265 +---------------------
 src/Text/Pandoc/Readers/LaTeX2.hs     | 313 ++++++++++++++++++++++++++
 src/Text/Pandoc/Readers/RST.hs        |   8 +-
 src/Text/Pandoc/Writers/CommonMark.hs |   5 +-
 src/Text/Pandoc/Writers/Custom.hs     |  15 +-
 8 files changed, 361 insertions(+), 293 deletions(-)
 create mode 100644 src/Text/Pandoc/Readers/LaTeX2.hs

diff --git a/pandoc.cabal b/pandoc.cabal
index 878f97e..8d374e8 100644
--- a/pandoc.cabal
+++ b/pandoc.cabal
@@ -382,15 +382,15 @@ library
                  blaze-html >= 0.9 && < 0.10,
                  blaze-markup >= 0.8 && < 0.9,
                  vector >= 0.10 && < 0.13,
-                 hslua >= 1.0.1 && < 1.1,
-                 hslua-module-text >= 0.2 && < 0.3,
+                 -- hslua >= 1.0.1 && < 1.1,
+                 -- hslua-module-text >= 0.2 && < 0.3,
                  binary >= 0.5 && < 0.11,
                  SHA >= 1.6 && < 1.7,
                  haddock-library >= 1.7 && < 1.8,
                  deepseq >= 1.3 && < 1.5,
                  JuicyPixels >= 3.1.6.1 && < 3.4,
                  Glob >= 0.7 && < 0.10,
-                 cmark-gfm >= 0.1.1 && < 0.2,
+                 -- cmark-gfm >= 0.1.1 && < 0.2,
                  doctemplates >= 0.2.1 && < 0.3,
                  network-uri >= 2.6 && < 2.7,
                  network >= 2.6,
@@ -410,10 +410,10 @@ library
      hs-source-dirs: prelude
      other-modules:  Prelude
      build-depends:  base-compat >= 0.9
-  if os(windows)
-    cpp-options:      -D_WINDOWS
-  else
-    build-depends:  unix >= 2.4 && < 2.8
+  -- if os(windows)
+  cpp-options:      -D_WINDOWS
+  -- else
+  --   build-depends:  unix >= 2.4 && < 2.8
   if flag(embed_data_files)
      cpp-options:   -DEMBED_DATA_FILES
      build-depends: file-embed >= 0.0 && < 0.1
@@ -505,7 +505,7 @@ library
                    Text.Pandoc.Writers.Math,
                    Text.Pandoc.Writers.Shared,
                    Text.Pandoc.Writers.OOXML,
-                   Text.Pandoc.Lua,
+                   -- Text.Pandoc.Lua,
                    Text.Pandoc.PDF,
                    Text.Pandoc.UTF8,
                    Text.Pandoc.Templates,
@@ -534,6 +534,7 @@ library
                    Text.Pandoc.Readers.Docx.Util,
                    Text.Pandoc.Readers.Docx.StyleMap,
                    Text.Pandoc.Readers.Docx.Fields,
+                   Text.Pandoc.Readers.LaTeX2,
                    Text.Pandoc.Readers.LaTeX.Parsing,
                    Text.Pandoc.Readers.LaTeX.Lang,
                    Text.Pandoc.Readers.Odt.Base,
@@ -560,15 +561,15 @@ library
                    Text.Pandoc.Writers.Roff,
                    Text.Pandoc.Writers.Powerpoint.Presentation,
                    Text.Pandoc.Writers.Powerpoint.Output,
-                   Text.Pandoc.Lua.Filter,
-                   Text.Pandoc.Lua.Global,
-                   Text.Pandoc.Lua.Init,
-                   Text.Pandoc.Lua.Module.MediaBag,
-                   Text.Pandoc.Lua.Module.Pandoc,
-                   Text.Pandoc.Lua.Module.Utils,
-                   Text.Pandoc.Lua.Packages,
-                   Text.Pandoc.Lua.StackInstances,
-                   Text.Pandoc.Lua.Util,
+                   -- Text.Pandoc.Lua.Filter,
+                   -- Text.Pandoc.Lua.Global,
+                   -- Text.Pandoc.Lua.Init,
+                   -- Text.Pandoc.Lua.Module.MediaBag,
+                   -- Text.Pandoc.Lua.Module.Pandoc,
+                   -- Text.Pandoc.Lua.Module.Utils,
+                   -- Text.Pandoc.Lua.Packages,
+                   -- Text.Pandoc.Lua.StackInstances,
+                   -- Text.Pandoc.Lua.Util,
                    Text.Pandoc.CSS,
                    Text.Pandoc.CSV,
                    Text.Pandoc.RoffChar,
diff --git a/src/Text/Pandoc/Filter/Lua.hs b/src/Text/Pandoc/Filter/Lua.hs
index e5c34c7..dd12fc4 100644
--- a/src/Text/Pandoc/Filter/Lua.hs
+++ b/src/Text/Pandoc/Filter/Lua.hs
@@ -36,8 +36,8 @@ import Control.Monad ((>=>))
 import Text.Pandoc.Class (PandocIO)
 import Text.Pandoc.Definition (Pandoc)
 import Text.Pandoc.Error (PandocError (PandocFilterError))
-import Text.Pandoc.Lua (Global (..), LuaException (..),
-                        runLua, runFilterFile, setGlobals)
+-- import Text.Pandoc.Lua (Global (..), LuaException (..),
+--                        runLua, runFilterFile, setGlobals)
 import Text.Pandoc.Options (ReaderOptions)
 
 -- | Run the Lua filter in @filterPath@ for a transformation to the
@@ -48,6 +48,8 @@ apply :: ReaderOptions
       -> FilePath
       -> Pandoc
       -> PandocIO Pandoc
+apply _ _ _ _ = return (error "Lua filtering is not enabled")
+{-
 apply ropts args fp doc = do
   let format = case args of
                  (x:_) -> x
@@ -63,3 +65,4 @@ forceResult :: FilePath -> Either LuaException Pandoc -> PandocIO Pandoc
 forceResult fp eitherResult = case eitherResult of
   Right x               -> return x
   Left (LuaException s) -> throw (PandocFilterError fp s)
+-}
diff --git a/src/Text/Pandoc/Readers/CommonMark.hs b/src/Text/Pandoc/Readers/CommonMark.hs
index 3cc75e2..8d35c5b 100644
--- a/src/Text/Pandoc/Readers/CommonMark.hs
+++ b/src/Text/Pandoc/Readers/CommonMark.hs
@@ -32,9 +32,8 @@ CommonMark is a strongly specified variant of Markdown: http://commonmark.org.
 -}
 module Text.Pandoc.Readers.CommonMark (readCommonMark)
 where
-
 import Prelude
-import CMarkGFM
+-- import CMarkGFM
 import Control.Monad.State
 import Data.List (groupBy)
 import qualified Data.Set as Set
@@ -48,6 +47,8 @@ import Text.Pandoc.Walk (walkM)
 
 -- | Parse a CommonMark formatted string into a 'Pandoc' structure.
 readCommonMark :: PandocMonad m => ReaderOptions -> Text -> m Pandoc
+readCommonMark _ _ = return (error "CommonMark is not supported")
+{-
 readCommonMark opts s = return $
   (if isEnabled Ext_auto_identifiers opts
       then addHeaderIdentifiers opts
@@ -225,3 +226,4 @@ addInline opts (Node _ (LINK url title) nodes) =
 addInline opts (Node _ (IMAGE url title) nodes) =
   (Image nullAttr (addInlines opts nodes) (unpack url, unpack title) :)
 addInline _ _ = id
+-}
diff --git a/src/Text/Pandoc/Readers/LaTeX.hs b/src/Text/Pandoc/Readers/LaTeX.hs
index 09c724f..746a5d4 100644
--- a/src/Text/Pandoc/Readers/LaTeX.hs
+++ b/src/Text/Pandoc/Readers/LaTeX.hs
@@ -79,6 +79,7 @@ import qualified Text.Pandoc.Translations as Translations
 import Text.Pandoc.Walk
 import qualified Text.Pandoc.Builder as B
 import qualified Data.Text.Normalize as Normalize
+import Text.Pandoc.Readers.LaTeX2
 
 -- for debugging:
 -- import Text.Pandoc.Extensions (getDefaultExtensions)
@@ -261,175 +262,6 @@ siUnit = do
             Just il -> return il
             Nothing -> mzero
 
-siUnitMap :: M.Map Text Inlines
-siUnitMap = M.fromList
-  [ ("fg", str "fg")
-  , ("pg", str "pg")
-  , ("ng", str "ng")
-  , ("ug", str "μg")
-  , ("mg", str "mg")
-  , ("g", str "g")
-  , ("kg", str "kg")
-  , ("amu", str "u")
-  , ("pm", str "pm")
-  , ("nm", str "nm")
-  , ("um", str "μm")
-  , ("mm", str "mm")
-  , ("cm", str "cm")
-  , ("dm", str "dm")
-  , ("m", str "m")
-  , ("km", str "km")
-  , ("as", str "as")
-  , ("fs", str "fs")
-  , ("ps", str "ps")
-  , ("ns", str "ns")
-  , ("us", str "μs")
-  , ("ms", str "ms")
-  , ("s", str "s")
-  , ("fmol", str "fmol")
-  , ("pmol", str "pmol")
-  , ("nmol", str "nmol")
-  , ("umol", str "μmol")
-  , ("mmol", str "mmol")
-  , ("mol", str "mol")
-  , ("kmol", str "kmol")
-  , ("pA", str "pA")
-  , ("nA", str "nA")
-  , ("uA", str "μA")
-  , ("mA", str "mA")
-  , ("A", str "A")
-  , ("kA", str "kA")
-  , ("ul", str "μl")
-  , ("ml", str "ml")
-  , ("l", str "l")
-  , ("hl", str "hl")
-  , ("uL", str "μL")
-  , ("mL", str "mL")
-  , ("L", str "L")
-  , ("hL", str "hL")
-  , ("mHz", str "mHz")
-  , ("Hz", str "Hz")
-  , ("kHz", str "kHz")
-  , ("MHz", str "MHz")
-  , ("GHz", str "GHz")
-  , ("THz", str "THz")
-  , ("mN", str "mN")
-  , ("N", str "N")
-  , ("kN", str "kN")
-  , ("MN", str "MN")
-  , ("Pa", str "Pa")
-  , ("kPa", str "kPa")
-  , ("MPa", str "MPa")
-  , ("GPa", str "GPa")
-  , ("mohm", str "mΩ")
-  , ("kohm", str "kΩ")
-  , ("Mohm", str "MΩ")
-  , ("pV", str "pV")
-  , ("nV", str "nV")
-  , ("uV", str "μV")
-  , ("mV", str "mV")
-  , ("V", str "V")
-  , ("kV", str "kV")
-  , ("W", str "W")
-  , ("uW", str "μW")
-  , ("mW", str "mW")
-  , ("kW", str "kW")
-  , ("MW", str "MW")
-  , ("GW", str "GW")
-  , ("J", str "J")
-  , ("uJ", str "μJ")
-  , ("mJ", str "mJ")
-  , ("kJ", str "kJ")
-  , ("eV", str "eV")
-  , ("meV", str "meV")
-  , ("keV", str "keV")
-  , ("MeV", str "MeV")
-  , ("GeV", str "GeV")
-  , ("TeV", str "TeV")
-  , ("kWh", str "kWh")
-  , ("F", str "F")
-  , ("fF", str "fF")
-  , ("pF", str "pF")
-  , ("K", str "K")
-  , ("dB", str "dB")
-  , ("angstrom", str "Å")
-  , ("arcmin", str "′")
-  , ("arcminute", str "′")
-  , ("arcsecond", str "″")
-  , ("astronomicalunit", str "ua")
-  , ("atomicmassunit", str "u")
-  , ("atto", str "a")
-  , ("bar", str "bar")
-  , ("barn", str "b")
-  , ("becquerel", str "Bq")
-  , ("bel", str "B")
-  , ("candela", str "cd")
-  , ("celsius", str "°C")
-  , ("centi", str "c")
-  , ("coulomb", str "C")
-  , ("dalton", str "Da")
-  , ("day", str "d")
-  , ("deca", str "d")
-  , ("deci", str "d")
-  , ("decibel", str "db")
-  , ("degreeCelsius",str "°C")
-  , ("degree", str "°")
-  , ("deka", str "d")
-  , ("electronvolt", str "eV")
-  , ("exa", str "E")
-  , ("farad", str "F")
-  , ("femto", str "f")
-  , ("giga", str "G")
-  , ("gram", str "g")
-  , ("hectare", str "ha")
-  , ("hecto", str "h")
-  , ("henry", str "H")
-  , ("hertz", str "Hz")
-  , ("hour", str "h")
-  , ("joule", str "J")
-  , ("katal", str "kat")
-  , ("kelvin", str "K")
-  , ("kilo", str "k")
-  , ("kilogram", str "kg")
-  , ("knot", str "kn")
-  , ("liter", str "L")
-  , ("litre", str "l")
-  , ("lumen", str "lm")
-  , ("lux", str "lx")
-  , ("mega", str "M")
-  , ("meter", str "m")
-  , ("metre", str "m")
-  , ("milli", str "m")
-  , ("minute", str "min")
-  , ("mmHg", str "mmHg")
-  , ("mole", str "mol")
-  , ("nano", str "n")
-  , ("nauticalmile", str "M")
-  , ("neper", str "Np")
-  , ("newton", str "N")
-  , ("ohm", str "Ω")
-  , ("Pa", str "Pa")
-  , ("pascal", str "Pa")
-  , ("percent", str "%")
-  , ("per", str "/")
-  , ("peta", str "P")
-  , ("pico", str "p")
-  , ("radian", str "rad")
-  , ("second", str "s")
-  , ("siemens", str "S")
-  , ("sievert", str "Sv")
-  , ("steradian", str "sr")
-  , ("tera", str "T")
-  , ("tesla", str "T")
-  , ("tonne", str "t")
-  , ("volt", str "V")
-  , ("watt", str "W")
-  , ("weber", str "Wb")
-  , ("yocto", str "y")
-  , ("yotta", str "Y")
-  , ("zepto", str "z")
-  , ("zetta", str "Z")
-  ]
 
 lit :: String -> LP m Inlines
 lit = pure . str
@@ -859,7 +691,7 @@ inlineEnvironments = M.fromList [
   ]
 
 inlineCommands :: PandocMonad m => M.Map Text (LP m Inlines)
-inlineCommands = M.union inlineLanguageCommands $ M.fromList
+inlineCommands = M.union inlineLanguageCommands $ M.fromList $
   [ ("emph", extractSpaces emph <$> tok)
   , ("textit", extractSpaces emph <$> tok)
   , ("textsl", extractSpaces emph <$> tok)
@@ -871,25 +703,10 @@ inlineCommands = M.union inlineLanguageCommands $ M.fromList
   , ("texttt", ttfamily)
   , ("sout", extractSpaces strikeout <$> tok)
   , ("alert", skipopts >> spanWith ("",["alert"],[]) <$> tok) -- beamer
-  , ("lq", return (str "‘"))
-  , ("rq", return (str "’"))
-  , ("textquoteleft", return (str "‘"))
-  , ("textquoteright", return (str "’"))
-  , ("textquotedblleft", return (str "“"))
-  , ("textquotedblright", return (str "”"))
   , ("textsuperscript", extractSpaces superscript <$> tok)
   , ("textsubscript", extractSpaces subscript <$> tok)
-  , ("textbackslash", lit "\\")
-  , ("backslash", lit "\\")
-  , ("slash", lit "/")
   , ("textbf", extractSpaces strong <$> tok)
   , ("textnormal", extractSpaces (spanWith ("",["nodecor"],[])) <$> tok)
-  , ("ldots", lit "…")
-  , ("vdots", lit "\8942")
-  , ("dots", lit "…")
-  , ("mdots", lit "…")
-  , ("sim", lit "~")
-  , ("sep", lit ",")
   , ("label", rawInlineOr "label" dolabel)
   , ("ref", rawInlineOr "ref" $ doref "ref")
   , ("cref", rawInlineOr "cref" $ doref "ref")       -- from cleveref.sty
@@ -900,15 +717,6 @@ inlineCommands = M.union inlineLanguageCommands $ M.fromList
   , ("[", mathDisplay . toksToString <$> manyTill anyTok (controlSeq "]"))
   , ("ensuremath", mathInline . toksToString <$> braced)
   , ("texorpdfstring", const <$> tok <*> tok)
-  , ("P", lit "¶")
-  , ("S", lit "§")
-  , ("$", lit "$")
-  , ("%", lit "%")
-  , ("&", lit "&")
-  , ("#", lit "#")
-  , ("_", lit "_")
-  , ("{", lit "{")
-  , ("}", lit "}")
   -- old TeX commands
   , ("em", extractSpaces emph <$> inlines)
   , ("it", extractSpaces emph <$> inlines)
@@ -925,23 +733,6 @@ inlineCommands = M.union inlineLanguageCommands $ M.fromList
   , ("MakeLowercase", makeLowercase <$> tok)
   , ("MakeTextLowercase", makeLowercase <$> tok)
   , ("lowercase", makeLowercase <$> tok)
-  , ("/", pure mempty) -- italic correction
-  , ("aa", lit "å")
-  , ("AA", lit "Å")
-  , ("ss", lit "ß")
-  , ("o", lit "ø")
-  , ("O", lit "Ø")
-  , ("L", lit "Ł")
-  , ("l", lit "ł")
-  , ("ae", lit "æ")
-  , ("AE", lit "Æ")
-  , ("oe", lit "œ")
-  , ("OE", lit "Œ")
-  , ("pounds", lit "£")
-  , ("euro", lit "€")
-  , ("copyright", lit "©")
-  , ("textasciicircum", lit "^")
-  , ("textasciitilde", lit "~")
   , ("H", accent '\779' Nothing) -- hungarumlaut
   , ("`", accent '\768' (Just '`')) -- grave
   , ("'", accent '\769' (Just '\'')) -- acute
@@ -964,23 +755,12 @@ inlineCommands = M.union inlineLanguageCommands $ M.fromList
   , ("u", accent '\774' Nothing) -- breve
   , ("k", accent '\808' Nothing) -- ogonek
   , ("textogonekcentered", accent '\808' Nothing) -- ogonek
-  , ("i", lit "ı")  -- dotless i
-  , ("j", lit "ȷ")  -- dotless j
   , ("newtie", accent '\785' Nothing) -- inverted breve
   , ("textcircled", accent '\8413' Nothing) -- combining circle
   , ("\\", linebreak <$ (do inTableCell <- sInTableCell <$> getState
                             guard $ not inTableCell
                             optional opt
                             spaces))
-  , (",", lit "\8198")
-  , ("@", pure mempty)
-  , (" ", lit "\160")
-  , ("ps", pure $ str "PS." <> space)
-  , ("TeX", lit "TeX")
-  , ("LaTeX", lit "LaTeX")
-  , ("bar", lit "|")
-  , ("textless", lit "<")
-  , ("textgreater", lit ">")
   , ("thanks", skipopts >> note <$> grouped block)
   , ("footnote", skipopts >> note <$> grouped block)
   , ("verb", doverb)
@@ -1111,20 +891,12 @@ inlineCommands = M.union inlineLanguageCommands $ M.fromList
   -- siuntix
   , ("SI", dosiunitx)
   -- hyphenat
-  , ("bshyp", lit "\\\173")
-  , ("fshyp", lit "/\173")
-  , ("dothyp", lit ".\173")
-  , ("colonhyp", lit ":\173")
-  , ("hyp", lit "-")
   , ("nohyphens", tok)
   , ("textnhtt", ttfamily)
   , ("nhttfamily", ttfamily)
   -- LaTeX colors
   , ("textcolor", coloredInline "color")
   , ("colorbox", coloredInline "background-color")
-  -- fontawesome
-  , ("faCheck", lit "\10003")
-  , ("faClose", lit "\10007")
   -- xspace
   , ("xspace", doxspace)
   -- etoolbox
@@ -1142,7 +914,7 @@ inlineCommands = M.union inlineLanguageCommands $ M.fromList
   , ("input", include "input")
   -- plain tex stuff that should just be passed through as raw tex
   , ("ifdim", ifdim)
-  ]
+  ] ++ inlCommands
 
 ifdim :: PandocMonad m => LP m Inlines
 ifdim = do
@@ -1323,43 +1095,12 @@ isBlockCommand s =
   s `M.member` (blockCommands :: M.Map Text (LP PandocPure Blocks))
   || s `Set.member` treatAsBlock
 
-treatAsBlock :: Set.Set Text
-treatAsBlock = Set.fromList
-   [ "special", "pdfannot", "pdfstringdef"
-   , "bibliographystyle"
-   , "maketitle", "makeindex", "makeglossary"
-   , "addcontentsline", "addtocontents", "addtocounter"
-      -- \ignore{} is used conventionally in literate haskell for definitions
-      -- that are to be processed by the compiler but not printed.
-   , "ignore"
-   , "hyperdef"
-   , "markboth", "markright", "markleft"
-   , "hspace", "vspace"
-   , "newpage"
-   , "clearpage"
-   , "pagebreak"
-   , "titleformat"
-   , "listoffigures"
-   , "listoftables"
-   , "write"
-   ]
 
 isInlineCommand :: Text -> Bool
 isInlineCommand s =
   s `M.member` (inlineCommands :: M.Map Text (LP PandocPure Inlines))
   || s `Set.member` treatAsInline
 
-treatAsInline :: Set.Set Text
-treatAsInline = Set.fromList
-  [ "index"
-  , "hspace"
-  , "vspace"
-  , "noindent"
-  , "newpage"
-  , "clearpage"
-  , "pagebreak"
-  ]
-
 dolabel :: PandocMonad m => LP m Inlines
 dolabel = do
   v <- braced
diff --git a/src/Text/Pandoc/Readers/LaTeX2.hs b/src/Text/Pandoc/Readers/LaTeX2.hs
new file mode 100644
index 0000000..ffad778
--- /dev/null
+++ b/src/Text/Pandoc/Readers/LaTeX2.hs
@@ -0,0 +1,313 @@
+{-# LANGUAGE NoImplicitPrelude #-}
+{-# LANGUAGE FlexibleInstances     #-}
+{-# LANGUAGE MultiParamTypeClasses #-}
+{-# LANGUAGE OverloadedStrings     #-}
+{-# LANGUAGE PatternGuards         #-}
+{-# LANGUAGE ScopedTypeVariables   #-}
+module Text.Pandoc.Readers.LaTeX2 (siUnitMap, treatAsBlock, treatAsInline, inlCommands) where
+
+import Prelude
+import Control.Applicative (many, optional, (<|>))
+import Control.Monad
+import Control.Monad.Except (throwError)
+import Data.Char (isDigit, isLetter, toLower, toUpper)
+import Data.Default
+import Data.List (intercalate, isPrefixOf)
+import qualified Data.Map as M
+import Data.Maybe (fromMaybe, maybeToList)
+import qualified Data.Set as Set
+import Data.Text (Text)
+import qualified Data.Text as T
+import Safe (minimumDef)
+import System.FilePath (addExtension, replaceExtension, takeExtension)
+import Text.Pandoc.BCP47 (Lang (..), renderLang)
+import Text.Pandoc.Builder
+import Text.Pandoc.Class (PandocMonad, PandocPure, getResourcePath, lookupEnv,
+                          readFileFromDirs, report, setResourcePath,
+                          setTranslations, translateTerm, trace)
+import Text.Pandoc.Error (PandocError ( PandocParseError, PandocParsecError))
+import Text.Pandoc.Highlighting (fromListingsLanguage, languagesByExtension)
+import Text.Pandoc.ImageSize (numUnit, showFl)
+import Text.Pandoc.Logging
+import Text.Pandoc.Options
+import Text.Pandoc.Parsing hiding (blankline, many, mathDisplay, mathInline,
+                            optional, space, spaces, withRaw, (<|>))
+import Text.Pandoc.Readers.LaTeX.Types (ExpansionPoint (..), Macro (..),
+                                        ArgSpec (..), Tok (..), TokType (..))
+import Text.Pandoc.Readers.LaTeX.Parsing
+import Text.Pandoc.Readers.LaTeX.Lang (polyglossiaLangToBCP47,
+                                       babelLangToBCP47)
+import Text.Pandoc.Shared
+import qualified Text.Pandoc.Translations as Translations
+import Text.Pandoc.Walk
+import qualified Text.Pandoc.Builder as B
+import qualified Data.Text.Normalize as Normalize
+
+siUnitMap :: M.Map Text Inlines
+siUnitMap = M.fromList
+  [ ("fg", str "fg")
+  , ("pg", str "pg")
+  , ("ng", str "ng")
+  , ("ug", str "μg")
+  , ("mg", str "mg")
+  , ("g", str "g")
+  , ("kg", str "kg")
+  , ("amu", str "u")
+  , ("pm", str "pm")
+  , ("nm", str "nm")
+  , ("um", str "μm")
+  , ("mm", str "mm")
+  , ("cm", str "cm")
+  , ("dm", str "dm")
+  , ("m", str "m")
+  , ("km", str "km")
+  , ("as", str "as")
+  , ("fs", str "fs")
+  , ("ps", str "ps")
+  , ("ns", str "ns")
+  , ("us", str "μs")
+  , ("ms", str "ms")
+  , ("s", str "s")
+  , ("fmol", str "fmol")
+  , ("pmol", str "pmol")
+  , ("nmol", str "nmol")
+  , ("umol", str "μmol")
+  , ("mmol", str "mmol")
+  , ("mol", str "mol")
+  , ("kmol", str "kmol")
+  , ("pA", str "pA")
+  , ("nA", str "nA")
+  , ("uA", str "μA")
+  , ("mA", str "mA")
+  , ("A", str "A")
+  , ("kA", str "kA")
+  , ("ul", str "μl")
+  , ("ml", str "ml")
+  , ("l", str "l")
+  , ("hl", str "hl")
+  , ("uL", str "μL")
+  , ("mL", str "mL")
+  , ("L", str "L")
+  , ("hL", str "hL")
+  , ("mHz", str "mHz")
+  , ("Hz", str "Hz")
+  , ("kHz", str "kHz")
+  , ("MHz", str "MHz")
+  , ("GHz", str "GHz")
+  , ("THz", str "THz")
+  , ("mN", str "mN")
+  , ("N", str "N")
+  , ("kN", str "kN")
+  , ("MN", str "MN")
+  , ("Pa", str "Pa")
+  , ("kPa", str "kPa")
+  , ("MPa", str "MPa")
+  , ("GPa", str "GPa")
+  , ("mohm", str "mΩ")
+  , ("kohm", str "kΩ")
+  , ("Mohm", str "MΩ")
+  , ("pV", str "pV")
+  , ("nV", str "nV")
+  , ("uV", str "μV")
+  , ("mV", str "mV")
+  , ("V", str "V")
+  , ("kV", str "kV")
+  , ("W", str "W")
+  , ("uW", str "μW")
+  , ("mW", str "mW")
+  , ("kW", str "kW")
+  , ("MW", str "MW")
+  , ("GW", str "GW")
+  , ("J", str "J")
+  , ("uJ", str "μJ")
+  , ("mJ", str "mJ")
+  , ("kJ", str "kJ")
+  , ("eV", str "eV")
+  , ("meV", str "meV")
+  , ("keV", str "keV")
+  , ("MeV", str "MeV")
+  , ("GeV", str "GeV")
+  , ("TeV", str "TeV")
+  , ("kWh", str "kWh")
+  , ("F", str "F")
+  , ("fF", str "fF")
+  , ("pF", str "pF")
+  , ("K", str "K")
+  , ("dB", str "dB")
+  , ("angstrom", str "Å")
+  , ("arcmin", str "′")
+  , ("arcminute", str "′")
+  , ("arcsecond", str "″")
+  , ("astronomicalunit", str "ua")
+  , ("atomicmassunit", str "u")
+  , ("atto", str "a")
+  , ("bar", str "bar")
+  , ("barn", str "b")
+  , ("becquerel", str "Bq")
+  , ("bel", str "B")
+  , ("candela", str "cd")
+  , ("celsius", str "°C")
+  , ("centi", str "c")
+  , ("coulomb", str "C")
+  , ("dalton", str "Da")
+  , ("day", str "d")
+  , ("deca", str "d")
+  , ("deci", str "d")
+  , ("decibel", str "db")
+  , ("degreeCelsius",str "°C")
+  , ("degree", str "°")
+  , ("deka", str "d")
+  , ("electronvolt", str "eV")
+  , ("exa", str "E")
+  , ("farad", str "F")
+  , ("femto", str "f")
+  , ("giga", str "G")
+  , ("gram", str "g")
+  , ("hectare", str "ha")
+  , ("hecto", str "h")
+  , ("henry", str "H")
+  , ("hertz", str "Hz")
+  , ("hour", str "h")
+  , ("joule", str "J")
+  , ("katal", str "kat")
+  , ("kelvin", str "K")
+  , ("kilo", str "k")
+  , ("kilogram", str "kg")
+  , ("knot", str "kn")
+  , ("liter", str "L")
+  , ("litre", str "l")
+  , ("lumen", str "lm")
+  , ("lux", str "lx")
+  , ("mega", str "M")
+  , ("meter", str "m")
+  , ("metre", str "m")
+  , ("milli", str "m")
+  , ("minute", str "min")
+  , ("mmHg", str "mmHg")
+  , ("mole", str "mol")
+  , ("nano", str "n")
+  , ("nauticalmile", str "M")
+  , ("neper", str "Np")
+  , ("newton", str "N")
+  , ("ohm", str "Ω")
+  , ("Pa", str "Pa")
+  , ("pascal", str "Pa")
+  , ("percent", str "%")
+  , ("per", str "/")
+  , ("peta", str "P")
+  , ("pico", str "p")
+  , ("radian", str "rad")
+  , ("second", str "s")
+  , ("siemens", str "S")
+  , ("sievert", str "Sv")
+  , ("steradian", str "sr")
+  , ("tera", str "T")
+  , ("tesla", str "T")
+  , ("tonne", str "t")
+  , ("volt", str "V")
+  , ("watt", str "W")
+  , ("weber", str "Wb")
+  , ("yocto", str "y")
+  , ("yotta", str "Y")
+  , ("zepto", str "z")
+  , ("zetta", str "Z")
+  ]
+
+treatAsBlock :: Set.Set Text
+treatAsBlock = Set.fromList
+   [ "special", "pdfannot", "pdfstringdef"
+   , "bibliographystyle"
+   , "maketitle", "makeindex", "makeglossary"
+   , "addcontentsline", "addtocontents", "addtocounter"
+      -- \ignore{} is used conventionally in literate haskell for definitions
+      -- that are to be processed by the compiler but not printed.
+   , "ignore"
+   , "hyperdef"
+   , "markboth", "markright", "markleft"
+   , "hspace", "vspace"
+   , "newpage"
+   , "clearpage"
+   , "pagebreak"
+   , "titleformat"
+   , "listoffigures"
+   , "listoftables"
+   , "write"
+   ]
+
+treatAsInline :: Set.Set Text
+treatAsInline = Set.fromList
+  [ "index"
+  , "hspace"
+  , "vspace"
+  , "noindent"
+  , "newpage"
+  , "clearpage"
+  , "pagebreak"
+  ]
+
+inlCommands :: PandocMonad m => [(Text, LP m Inlines)]
+inlCommands =
+  [ ("lq", return (str "‘"))
+  , ("rq", return (str "’"))
+  , ("textquoteleft", return (str "‘"))
+  , ("textquoteright", return (str "’"))
+  , ("textquotedblleft", return (str "“"))
+  , ("textquotedblright", return (str "”"))
+  , ("textbackslash", lit "\\")
+  , ("backslash", lit "\\")
+  , ("slash", lit "/")
+  , ("ldots", lit "…")
+  , ("vdots", lit "\8942")
+  , ("dots", lit "…")
+  , ("mdots", lit "…")
+  , ("sim", lit "~")
+  , ("sep", lit ",")
+  , ("P", lit "¶")
+  , ("S", lit "§")
+  , ("$", lit "$")
+  , ("%", lit "%")
+  , ("&", lit "&")
+  , ("#", lit "#")
+  , ("_", lit "_")
+  , ("{", lit "{")
+  , ("}", lit "}")
+  , ("/", pure mempty) -- italic correction
+  , ("aa", lit "å")
+  , ("AA", lit "Å")
+  , ("ss", lit "ß")
+  , ("o", lit "ø")
+  , ("O", lit "Ø")
+  , ("L", lit "Ł")
+  , ("l", lit "ł")
+  , ("ae", lit "æ")
+  , ("AE", lit "Æ")
+  , ("oe", lit "œ")
+  , ("OE", lit "Œ")
+  , ("pounds", lit "£")
+  , ("euro", lit "€")
+  , ("copyright", lit "©")
+  , ("textasciicircum", lit "^")
+  , ("textasciitilde", lit "~")
+  , ("i", lit "ı")  -- dotless i
+  , ("j", lit "ȷ")  -- dotless j
+  , (",", lit "\8198")
+  , ("@", pure mempty)
+  , (" ", lit "\160")
+  , ("ps", pure $ str "PS." <> space)
+  , ("TeX", lit "TeX")
+  , ("LaTeX", lit "LaTeX")
+  , ("bar", lit "|")
+  , ("textless", lit "<")
+  , ("textgreater", lit ">")
+  , ("bshyp", lit "\\\173")
+  , ("fshyp", lit "/\173")
+  , ("dothyp", lit ".\173")
+  , ("colonhyp", lit ":\173")
+  , ("hyp", lit "-")
+  -- fontawesome
+  , ("faCheck", lit "\10003")
+  , ("faClose", lit "\10007")
+  ]
+
+lit :: String -> LP m Inlines
+lit = pure . str
diff --git a/src/Text/Pandoc/Readers/RST.hs b/src/Text/Pandoc/Readers/RST.hs
index 1938ca1..ba4e777 100644
--- a/src/Text/Pandoc/Readers/RST.hs
+++ b/src/Text/Pandoc/Readers/RST.hs
@@ -739,7 +739,7 @@ directive' = do
                                      ""   -> stateRstDefaultRole def
                                      role -> role })
         x | x == "code" || x == "code-block" ->
-          codeblock name classes
+          codeblock' name classes
                     (lookup "number-lines" fields) (trim top) body
         "aafig" -> do
           let attribs = (name, ["aafig"], map (second trimr) fields)
@@ -991,9 +991,9 @@ toChunks = dropWhile null
                           then "\\begin{aligned}\n" ++ s ++ "\n\\end{aligned}"
                           else s
 
-codeblock :: String -> [String] -> Maybe String -> String -> String
-          -> RSTParser m Blocks
-codeblock ident classes numberLines lang body =
+codeblock' :: String -> [String] -> Maybe String -> String -> String
+           -> RSTParser m Blocks
+codeblock' ident classes numberLines lang body =
   return $ B.codeBlockWith attribs $ stripTrailingNewlines body
     where attribs = (ident, classes', kvs)
           classes' = "sourceCode" : lang
diff --git a/src/Text/Pandoc/Writers/CommonMark.hs b/src/Text/Pandoc/Writers/CommonMark.hs
index c007f77..292cfdd 100644
--- a/src/Text/Pandoc/Writers/CommonMark.hs
+++ b/src/Text/Pandoc/Writers/CommonMark.hs
@@ -34,7 +34,7 @@ CommonMark:  <http://commonmark.org>
 module Text.Pandoc.Writers.CommonMark (writeCommonMark) where
 
 import Prelude
-import CMarkGFM
+-- import CMarkGFM
 import Control.Monad.State.Strict (State, get, modify, runState)
 import Data.Char (isAscii)
 import Data.Foldable (foldrM)
@@ -55,6 +55,8 @@ import Text.Pandoc.XML (toHtml5Entities)
 
 -- | Convert Pandoc to CommonMark.
 writeCommonMark :: PandocMonad m => WriterOptions -> Pandoc -> m Text
+writeCommonMark _ _ = return (error "CommonMark is not supported")
+{-
 writeCommonMark opts (Pandoc meta blocks) = do
   let (blocks', notes) = runState (walkM processNotes blocks) []
       notes' = if null notes
@@ -374,3 +376,4 @@ toSuperscriptInline (Str s) = Str <$> traverse toSuperscript s
 toSuperscriptInline LineBreak = Just LineBreak
 toSuperscriptInline SoftBreak = Just SoftBreak
 toSuperscriptInline _ = Nothing
+-}
diff --git a/src/Text/Pandoc/Writers/Custom.hs b/src/Text/Pandoc/Writers/Custom.hs
index f383859..7804fa1 100644
--- a/src/Text/Pandoc/Writers/Custom.hs
+++ b/src/Text/Pandoc/Writers/Custom.hs
@@ -39,20 +39,21 @@ import Data.List (intersperse)
 import qualified Data.Map as M
 import Data.Text (Text, pack)
 import Data.Typeable
-import Foreign.Lua (Lua, Pushable)
+--import Foreign.Lua (Lua, Pushable)
 import Text.Pandoc.Class (PandocIO)
 import Text.Pandoc.Definition
 import Text.Pandoc.Error
-import Text.Pandoc.Lua (Global (..), LuaException (LuaException),
-                        runLua, setGlobals)
-import Text.Pandoc.Lua.Util (addField, dofileWithTraceback)
+--import Text.Pandoc.Lua (Global (..), LuaException (LuaException),
+--                        runLua, setGlobals)
+--import Text.Pandoc.Lua.Util (addField, dofileWithTraceback)
 import Text.Pandoc.Options
 import Text.Pandoc.Templates
 import qualified Text.Pandoc.UTF8 as UTF8
 import Text.Pandoc.Writers.Shared
 
-import qualified Foreign.Lua as Lua
+-- import qualified Foreign.Lua as Lua
 
+{-
 attrToMap :: Attr -> M.Map String String
 attrToMap (id',classes,keyvals) = M.fromList
     $ ("id", id')
@@ -103,9 +104,12 @@ data PandocLuaException = PandocLuaException String
     deriving (Show, Typeable)
 
 instance Exception PandocLuaException
+-}
 
 -- | Convert Pandoc to custom markup.
 writeCustom :: FilePath -> WriterOptions -> Pandoc -> PandocIO Text
+writeCustom _ _ _ = return (error "Custom markup is not supported.")
+{-
 writeCustom luaFile opts doc@(Pandoc meta _) = do
   let globals = [ PANDOC_DOCUMENT doc
                 , PANDOC_SCRIPT_FILE luaFile
@@ -253,3 +257,4 @@ inlineToCustom (Note contents) = Lua.callFunc "Note" (Stringify contents)
 
 inlineToCustom (Span attr items) =
   Lua.callFunc "Span" (Stringify items) (attrToMap attr)
+-}
-- 
2.18.0

